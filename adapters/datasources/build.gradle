apply plugin: 'org.springframework.boot'

description = "studio-datasources"
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.ajoberstar:grgit:2.0.1")
    }
}

apply plugin: "org.ajoberstar.grgit"

repositories {
    mavenCentral()
}
processResources.destinationDir = compileJava.destinationDir

compileJava.dependsOn processResources

configurations {
    domaGenRuntime
}

bootRepackage {
    enabled = false
}

dependencies {
    def jdbcDriver = "mysql:mysql-connector-java:${mySqlConnectorVersion}"
    def domaVersion = "2.17.0"
    compile("org.codehaus.janino:janino")
    compile('org.seasar.doma.boot:doma-spring-boot-starter:1.1.1')
    compile project(":studio-core")
    compile project(":studio-contracts")
    testRuntime("${jdbcDriver}")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.seasar.doma:doma:${domaVersion}")
    compile("org.springframework.boot:spring-boot-starter")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    compile group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    testRuntime group: 'ch.qos.logback', name: 'logback-core', version: "${logbackVersion}"
    testRuntime group: 'ch.qos.logback', name: 'logback-classic', version: "${logbackVersion}"
    domaGenRuntime("org.seasar.doma:doma-gen:${domaVersion}")
    domaGenRuntime("${jdbcDriver}")

}

test {
    jvmArgs = ['-Dspring.profiles.active=unit']
}

task domaGen << {
    // まず変更が必要なもの
    def rootPackageName = 'org.venuspj.studio.adapter.doma'
    def daoPackagePath = 'src/main/java/org/venuspj/studio/adapter/doma/dao'
    def dbUrl = 'jdbc:mysql://localhost:3306/studiout'
    def dbUser = 'studio'
    def dbPassword = 'Shishi1231'
    def tableNamePattern = '.*'
    // おそらく変更不要なもの
    def importOfComponentAndAutowiredDomaConfig = "${rootPackageName}.ComponentAndAutowiredDomaConfig"
    def workDirPath = 'work'
    def workDaoDirPath = "${workDirPath}/dao"

    // 作業用ディレクトリを削除する
    clearDir("${workDirPath}")

    // 現在の Dao インターフェースのバックアップを取得する
    copy() {
        from "${daoPackagePath}"
        into "${workDaoDirPath}/org"
    }

    // Dao インターフェース、Entity クラスを生成する
    ant.taskdef(resource: 'domagentask.properties',
            classpath: configurations.domaGenRuntime.asPath)
    ant.gen(url: "${dbUrl}", user: "${dbUser}", password: "${dbPassword}", tableNamePattern: "${tableNamePattern}") {
        entityConfig(packageName: "${rootPackageName}.entity", useListener: false, overwrite: true)
        daoConfig(packageName: "${rootPackageName}.dao", overwrite: true)
        sqlConfig(overwrite: true)
        sqlTestCaseConfig {
            fileset(dir: 'src/main/resources') {
                include(name: 'META-INF/**/*.sql')
            }
        }
    }
    //, tableNamePattern: "${tableNamePattern}"
    // 生成された Dao インターフェースを作業用ディレクトリにコピーし、
    // @ComponentAndAutowiredDomaConfig アノテーションを付加する
    copy() {
        from "${daoPackagePath}"
        into "${workDaoDirPath}/replace"
        filter {
            line ->
                line.replaceAll('import org.seasar.doma.Dao;', "import ${importOfComponentAndAutowiredDomaConfig};\nimport org.seasar.doma.Dao;")
                        .replaceAll('@Dao', '@Dao\n@ComponentAndAutowiredDomaConfig')
        }
    }

    // @ComponentAndAutowiredDomaConfig アノテーションを付加した Dao インターフェースを
    // dao パッケージへ戻す
    copy() {
        from "${workDaoDirPath}/replace"
        into "${daoPackagePath}"
    }

    // 元々 dao パッケージ内にあったファイルを元に戻す
    copy() {
        from "${workDaoDirPath}/org"
        into "${daoPackagePath}"
    }

    // 作業用ディレクトリを削除する
    clearDir("${workDirPath}")

}

void clearDir(String dirPath) {
    delete dirPath
}

